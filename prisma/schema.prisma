// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String     @unique
    username      String?    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          Role       @default(USER)
    accounts      Account[]
    posts         Post[]
    projectId     String?
    Project       Project[]
    Media         Media[]
    Messages      Messages[]
    Chat          Chat?      @relation(fields: [chatId], references: [id])
    chatId        String?
}

model Project {
    id          String  @id @default(cuid())
    title       String  @default("Untitled")
    description String? @default("No Description Provided.")
    owner       User    @relation(fields: [ownerId], references: [id])
    ownerId     String
    Task        Task[]
}

model Task {
    id          String   @id @default(cuid())
    title       String   @default("Unnamed Task")
    description String?  @default("No Description Provided.")
    dueDate     DateTime
    completed   Boolean  @default(false)
    project     Project  @relation(fields: [projectId], references: [id])
    projectId   String
}

model Media {
    id         String   @id @default(cuid())
    url        String
    mimeType   String
    size       Int
    createdAt  DateTime @default(now())
    uploader   User     @relation(fields: [uploaderId], references: [id])
    uploaderId String
    Chat       Chat[]
}

model Messages {
    id     String @id @default(cuid())
    text   String
    user   User   @relation(fields: [userId], references: [id])
    userId String
    chat   Chat   @relation(fields: [chatId], references: [id])
    chatId String
}

model Chat {
    id       String     @id @default(cuid())
    users    User[]
    messages Messages[]
    media    Media      @relation(fields: [mediaId], references: [id])
    mediaId  String
}

enum Role {
    ADMIN
    USER
    BACKEND
    FRONTEND
    DESIGNER
    EMPLOYEE
}
